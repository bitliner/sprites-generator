{
  "name": "node-spritesheet",
  "description": "Sprite sheet generator for node.js",
  "version": "0.4.2",
  "author": {
    "name": "Richard Butler",
    "email": "rich@aspectvision.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/richardbutler/node-spritesheet.git"
  },
  "main": "./index",
  "scripts": {
    "install": "grunt"
  },
  "dependencies": {
    "async": "~0.1.22",
    "q-fs": "~0.1.32",
    "underscore": "~1.4.2",
    "grunt": "~0.4.1",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-contrib-clean": "~0.5.0"
  },
  "readme": "# node-spritesheet\n\nNode-spritesheet is a utility to create sprite sheets in node.js. Its original\nintention was to be used as a [Grunt](https://github.com/cowboy/grunt) task,\nbut I decided it was worth abstracting further.\n\nIn the most part, it is an indirect port of\n[Jake Gordon](https://github.com/jakesgordon)'s much more mature\n[Sprite Factory for Ruby](https://github.com/jakesgordon/sprite-factory).\n\n## Pixel ratios (retina displays, etc)\n\nIt will also handle auto-resizing of images for specified pixel\ndensities. No more fart-arsing about for retina displays, just supply the\nlargest (highest-density) image. By default, this uses ImageMagick's version of\nthe Lanczos and Mitchell algorithms, depending on the most appropriate, but you\ncan specify any of the 20-odd [available](http://www.imagemagick.org/script/command-line-options.php#filter).\n\nYou're not locked in to auto-resampling though, you can supply multiple density\nversions of the same image, if you prefer.\n\nAdditionally, it will add the relevant cross-browser media queries to the CSS.\n\n## Requirements\n\nRequires [ImageMagick](http://www.imagemagick.org), available via HomeBrew (`$ sudo brew install ImageMagick`) or MacPorts: (`$ sudo port install ImageMagick`).\n\n## Installation\n\n\tnpm install node-spritesheet\n\n## Usage\n\n\tvar Builder = require( 'node-spritesheet' ).Builder;\n\tvar b = new Builder( options );\n\tb.build( callback );\n\n### Simple example\n\nTakes in a series of images a generates a spritesheet.\n\n    var Builder = require( 'node-spritesheet' ).Builder;\n    \n    var builder = new Builder({\n        outputDirectory: '/path/to/directory',\n        outputImage: 'sprite.png',\n        outputCss: 'sprite.css',\n        selector: '.sprite',\n        images: [ 'image1.png', 'image2.png', 'image3.png' ]\n    });\n    \n    builder.build( function() {\n        console.log( \"Built from \" + builder.files.length + \" images\" );\n    });\n\n### More complex example\n\nAdd configurations to the builder to output multiple spritesheets based on\ndifferent pixel densities, using media queries.\n\n    var Builder = require( 'node-spritesheet' ).Builder;\n    \n    var builder = new Builder({\n        outputDirectory: '/path/to/directory',\n        outputCss: 'sprite.css',\n        selector: '.sprite',\n        images: [ 'image1.png', 'image2.png', image3.png' ]\n    });\n    \n    builder.addConfiguration( \"legacy\", {\n        pixelRatio: 1,\n        outputImage: 'sprite.png'\n    });\n    \n    builder.addConfiguration( \"retina\", {\n        pixelRatio: 2,\n        outputImage: 'sprite@2x.png'\n    });\n    \n    builder.build( function() {\n        console.log( \"Built from \" + builder.files.length + \" images\" );\n    });\n\n### Another complex example\n\nEven though ImageMagick uses some pretty decent algorithms for resampling images,\nyou may not want node-spritesheet to automatically resize your retina versions\nfor you, you may want to instead keep two copies of each image.\n\n    var Builder = require( 'node-spritesheet' ).Builder;\n    \n    var builder = new Builder({\n        outputDirectory: '/path/to/directory',\n        outputCss: 'sprite.css',\n        selector: '.sprite'\n    });\n    \n    builder.addConfiguration( \"legacy\", {\n        pixelRatio: 1,\n        outputImage: 'sprite.png',\n        images: [ 'image1.png', 'image2.png', image3.png' ]\n    });\n    \n    builder.addConfiguration( \"retina\", {\n        pixelRatio: 2,\n        outputImage: 'sprite@2x.png',\n        images: [ 'image1@2x.png', 'image2@2x.png', image3@2x.png' ]\n    });\n    \n    builder.build( function() {\n        console.log( \"Built from \" + builder.files.length + \" images\" );\n    });\n\n## Grunt task\n\nThis is a multi-task, supporting multiple spritesheets in one gruntfile.\n\nThe following grunt.js structure takes all images in src/icons and creates\na spritesheet at bin/assets/sprite.png, with an accompanying stylesheet at\nbin/assets/sprite.css.\n\n### Simple example\n\n    // Add to your grunt config.\n\tspritesheet: {\n\t\tcompile: {\n\t\t\toptions: {\n\t\t\t\t// Compiles to bin/assets/images/spritesheets/flags.png\n\t\t\t\toutputImage: 'images/spritesheets/flags.png',\n\t\t\t\t// Compiles to bin/assets/stylesheets/flags.css\n\t\t\t\toutputCss: 'stylesheets/flags.css',\n\t\t\t\t// Uses this compound selector in the css, e.g. '.flag.my-image {}'\n\t\t\t\tselector: '.flag'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'bin/assets': 'src/icons/flags/*'\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Add to your imports.\n\tloadNpmTasks( 'node-spritesheet' );\n\n### Complex example\n\nThis adds retina/legacy support, and resamples the images (assuming the\nhighest density has been supplied).\n\n    // Add to your grunt config.\n    spritesheet: {\n        compile: {\n            options: {\n                outputCss: 'sprite.css',\n                selector: '.sprite',\n                \n                // Optional ImageMagick sampling filter.\n                downsampling: \"LanczosSharp\",\n                \n                // Optional absolute path to output image.\n                httpImagePath: \"http://static.mysite.com/images/sprite.png\",\n                \n                // Output configurations: in this instance to output two sprite sheets,\n                // one for \"legacy\" (i.e. 72dpi, pixel ratio 1), and \"retina\" (x2).\n                // These keys (legacy, retina) are completely arbitrary.\n                output: {\n                    legacy: {\n                        pixelRatio: 1,\n                        outputImage: 'sprite.png'\n                    },\n                    // As the retina scheme has the highest pixel ratio, it will be\n                    // assumed that all images passed to the builder are for 'retina',\n                    // and will be downscaled for 'legacy'.\n                    retina: {\n                        pixelRatio: 2,\n                        outputImage: 'sprite@2x.png'\n                    }\n                },\n                \n                // Allows you to augment your selector names for each image, based on\n                // the bare image \"name\", or the full image path.\n                resolveImageSelector: function( name, fullpath ) {\n                    // For example, your files may well already be named with @2x, but\n                    // you won't want that included in your CSS selectors.\n                    return name.split( \"@2x\" ).join( \"\" );\n                }\n            },\n            files: {\n                'bin/assets': 'src/icons/flags/*'\n            }\n        }\n    }\n    \n    // Add to your imports.\n    loadNpmTasks( 'node-spritesheet' );\n\n### Second complex example\n\nAgain, this adds retina/legacy support, but uses a filter function to ascertain\nwhich images are retina and which aren't, meaning you don't have to rely on the\nresampling option, if you want finer control.\n\n    // Add to your grunt config.\n    spritesheet: {\n        compile: {\n            options: {\n                outputCss: 'sprite.css',\n                selector: '.sprite',\n                output: {\n                    legacy: {\n                        pixelRatio: 1,\n                        outputImage: 'sprite.png',\n                        // Just process the non-retina files\n                        filter: function( fullpath ) {\n                            return fullpath.indexOf( \"@2x\" ) === -1;\n                        }\n                    },\n                    retina: {\n                        pixelRatio: 2,\n                        outputImage: 'sprite@2x.png',\n                        // Just process the retina files\n                        filter: function( fullpath ) {\n                            return fullpath.indexOf( \"@2x\" ) >= 0;\n                        }\n                    }\n                }\n            },\n            files: {\n                'bin/assets': 'src/icons/flags/*'\n            }\n        }\n    }\n    \n    // Add to your imports.\n    loadNpmTasks( 'node-spritesheet' );\n",
  "readmeFilename": "README.md",
  "_id": "node-spritesheet@0.4.2",
  "dist": {
    "shasum": "3835a5644c36b94aba22da3bac676764b1e4bfd3"
  },
  "_from": "node-spritesheet@",
  "_resolved": "https://registry.npmjs.org/node-spritesheet/-/node-spritesheet-0.4.2.tgz"
}
